# Docker Compose configuration for MLOps California Housing Prediction Platform
# Includes GPU passthrough, service orchestration, and monitoring stack

version: '3.8'

services:
  # ============================================================================
  # Main API Service with GPU Support
  # ============================================================================
  mlops-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: mlops-california-housing-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - DATABASE_URL=sqlite:///app/data/mlops_platform.db
      - PROMETHEUS_ENABLED=true
      - PROMETHEUS_PORT=9090
      - LOG_LEVEL=info
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DEBUG=false
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - ./plots:/app/plots
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    depends_on:
      - mlflow
      - prometheus
    networks:
      - mlops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ============================================================================
  # MLflow Tracking Server
  # ============================================================================
  mlflow:
    image: python:3.10-slim
    container_name: mlops-mlflow-server
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=sqlite:///mlflow/mlflow.db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - mlflow_data:/mlflow
    command: >
      bash -c "
        pip install mlflow==2.8.0 &&
        mlflow server 
        --backend-store-uri sqlite:///mlflow/mlflow.db 
        --default-artifact-root /mlflow/artifacts 
        --host 0.0.0.0 
        --port 5000
      "
    networks:
      - mlops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ============================================================================
  # Prometheus Monitoring
  # ============================================================================
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: mlops-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mlops-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Grafana Dashboard
  # ============================================================================
  grafana:
    image: grafana/grafana:10.1.0
    container_name: mlops-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - mlops-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # NVIDIA GPU Exporter for Prometheus
  # ============================================================================
  nvidia-gpu-exporter:
    image: mindprince/nvidia_gpu_prometheus_exporter:0.1
    container_name: mlops-gpu-exporter
    restart: unless-stopped
    ports:
      - "9445:9445"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    networks:
      - mlops-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9445/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Redis for Caching (Optional)
  # ============================================================================
  redis:
    image: redis:7.2-alpine
    container_name: mlops-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - mlops-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Development Service (for development environment)
  # ============================================================================
  mlops-api-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: mlops-california-housing-api-dev
    ports:
      - "8001:8000"
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - DATABASE_URL=sqlite:///app/data/mlops_platform_dev.db
      - DEBUG=true
      - LOG_LEVEL=debug
    volumes:
      - .:/app
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    depends_on:
      - mlflow
    networks:
      - mlops-network
    profiles:
      - development

  # ============================================================================
  # CPU-only Service (for environments without GPU)
  # ============================================================================
  mlops-api-cpu:
    build:
      context: .
      dockerfile: Dockerfile.cpu
      target: production
    container_name: mlops-california-housing-api-cpu
    restart: unless-stopped
    ports:
      - "8002:8000"
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - DATABASE_URL=sqlite:///app/data/mlops_platform_cpu.db
      - PROMETHEUS_ENABLED=true
      - PROMETHEUS_PORT=9090
      - LOG_LEVEL=info
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DEBUG=false
      - GPU_ENABLED=false
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - ./plots:/app/plots
    depends_on:
      - mlflow
      - prometheus
    networks:
      - mlops-network
    profiles:
      - cpu-only
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

# ============================================================================
# Networks
# ============================================================================
networks:
  mlops-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# Volumes
# ============================================================================
volumes:
  mlflow_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local