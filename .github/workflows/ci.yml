name: CI - Code Quality and Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'
  POETRY_VERSION: '1.6.1'

jobs:
  # ============================================================================
  # Code Quality Checks
  # ============================================================================
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy pytest pytest-cov
        pip install -r requirements.txt

    - name: Run Black formatter check
      run: |
        black --check --diff src/ tests/ examples/ scripts/
      continue-on-error: false

    - name: Run Flake8 linter
      run: |
        flake8 src/ tests/ examples/ scripts/ --max-line-length=88 --extend-ignore=E203,W503
      continue-on-error: false

    - name: Run MyPy type checker
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true

    - name: Check for security vulnerabilities
      run: |
        pip install bandit safety
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # ============================================================================
  # Unit Tests (CPU-only)
  # ============================================================================
  test-cpu:
    name: Unit Tests (CPU)
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install CPU-only dependencies
      run: |
        python -m pip install --upgrade pip
        # Install PyTorch CPU version
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        # Install other dependencies
        pip install -r requirements.txt
        # Install test dependencies
        pip install pytest pytest-asyncio pytest-cov pytest-mock

    - name: Create test environment
      run: |
        mkdir -p data/raw data/processed plots logs models
        cp .env.template .env
        echo "GPU_ENABLED=false" >> .env
        echo "CUDA_VISIBLE_DEVICES=" >> .env

    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term
      env:
        PYTHONPATH: ${{ github.workspace }}
        GPU_ENABLED: false

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
          pytest-report.xml

  # ============================================================================
  # Integration Tests
  # ============================================================================
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test-cpu
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mlops_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx

    - name: Set up test database
      run: |
        pip install psycopg2-binary
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/mlops_test" >> .env

    - name: Run integration tests
      run: |
        pytest tests/test_api_foundation.py tests/test_prediction_endpoints.py -v --cov=src.api
      env:
        PYTHONPATH: ${{ github.workspace }}
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mlops_test
        GPU_ENABLED: false

  # ============================================================================
  # Docker Build Test
  # ============================================================================
  test-docker-build:
    name: Test Docker Build
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build CPU Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.cpu
        target: production
        push: false
        tags: mlops-california-housing:test-cpu
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test CPU Docker image
      run: |
        docker run --rm -d --name test-container -p 8000:8000 \
          -e GPU_ENABLED=false \
          -e DATABASE_URL=sqlite:///app/data/test.db \
          mlops-california-housing:test-cpu
        
        # Wait for container to start
        sleep 30
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Stop container
        docker stop test-container

  # ============================================================================
  # Documentation Check
  # ============================================================================
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check README exists and is not empty
      run: |
        if [ ! -f README.md ] || [ ! -s README.md ]; then
          echo "README.md is missing or empty"
          exit 1
        fi

    - name: Check API documentation
      run: |
        if [ ! -f src/api/README.md ]; then
          echo "API documentation is missing"
          exit 1
        fi

    - name: Validate requirements.txt
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools
        pip-compile --dry-run requirements.txt

  # ============================================================================
  # Dependency Security Scan
  # ============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # Performance Benchmarks
  # ============================================================================
  performance-test:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test-cpu
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install -r requirements.txt
        pip install locust

    - name: Run performance tests
      run: |
        # Start API in background
        python -m uvicorn src.api.main:app --host 0.0.0.0 --port 8000 &
        API_PID=$!
        
        # Wait for API to start
        sleep 10
        
        # Run basic load test
        echo "
        from locust import HttpUser, task, between
        
        class APIUser(HttpUser):
            wait_time = between(1, 3)
            
            @task
            def health_check(self):
                self.client.get('/health')
                
            @task
            def model_info(self):
                self.client.get('/model/info')
        " > locustfile.py
        
        locust -f locustfile.py --headless -u 10 -r 2 -t 30s --host http://localhost:8000 --html performance-report.html
        
        # Stop API
        kill $API_PID
      env:
        PYTHONPATH: ${{ github.workspace }}
        GPU_ENABLED: false

    - name: Upload performance report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-report
        path: performance-report.html

  # ============================================================================
  # Summary Job
  # ============================================================================
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [code-quality, test-cpu, test-integration, test-docker-build, docs-check, security-scan, performance-test]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "CPU Tests: ${{ needs.test-cpu.result }}"
        echo "Integration Tests: ${{ needs.test-integration.result }}"
        echo "Docker Build Test: ${{ needs.test-docker-build.result }}"
        echo "Documentation Check: ${{ needs.docs-check.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        echo "Performance Test: ${{ needs.performance-test.result }}"
        
        if [[ "${{ needs.code-quality.result }}" != "success" ]] || \
           [[ "${{ needs.test-cpu.result }}" != "success" ]] || \
           [[ "${{ needs.test-integration.result }}" != "success" ]] || \
           [[ "${{ needs.test-docker-build.result }}" != "success" ]] || \
           [[ "${{ needs.docs-check.result }}" != "success" ]]; then
          echo "❌ CI pipeline failed"
          exit 1
        else
          echo "✅ CI pipeline passed"
        fi