name: Docker Build and Push

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to registry'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================================================
  # Build Matrix for Multiple Architectures and Variants
  # ============================================================================
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    strategy:
      matrix:
        variant: [gpu, cpu]
        include:
          - variant: gpu
            dockerfile: Dockerfile
            platforms: linux/amd64
            target: production
          - variant: cpu
            dockerfile: Dockerfile.cpu
            platforms: linux/amd64,linux/arm64
            target: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request' && secrets.DOCKERHUB_USERNAME
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          ${{ secrets.DOCKERHUB_USERNAME && format('{0}/mlops-california-housing', secrets.DOCKERHUB_USERNAME) || '' }}
        tags: |
          type=ref,event=branch,suffix=-${{ matrix.variant }}
          type=ref,event=pr,suffix=-${{ matrix.variant }}
          type=semver,pattern={{version}},suffix=-${{ matrix.variant }}
          type=semver,pattern={{major}}.{{minor}},suffix=-${{ matrix.variant }}
          type=semver,pattern={{major}},suffix=-${{ matrix.variant }}
          type=raw,value=latest-${{ matrix.variant }},enable={{is_default_branch}}
          type=sha,prefix={{branch}}-,suffix=-${{ matrix.variant }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./${{ matrix.dockerfile }}
        target: ${{ matrix.target }}
        platforms: ${{ matrix.platforms }}
        push: ${{ github.event_name != 'pull_request' || github.event.inputs.push_to_registry == 'true' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

    - name: Test Docker image
      run: |
        # Test the built image
        docker run --rm -d --name test-${{ matrix.variant }} -p 8000:8000 \
          -e GPU_ENABLED=${{ matrix.variant == 'gpu' && 'true' || 'false' }} \
          -e DATABASE_URL=sqlite:///app/data/test.db \
          ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
        
        # Wait for container to start
        sleep 30
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Test model info endpoint
        curl -f http://localhost:8000/model/info || exit 1
        
        # Stop container
        docker stop test-${{ matrix.variant }}

    - name: Run security scan on image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
        format: 'sarif'
        output: 'trivy-image-${{ matrix.variant }}.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-image-${{ matrix.variant }}.sarif'

  # ============================================================================
  # Multi-arch Manifest Creation
  # ============================================================================
  create-manifest:
    name: Create Multi-arch Manifest
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to Docker Hub
      if: secrets.DOCKERHUB_USERNAME
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Create and push manifest for GPU variant
      run: |
        # GitHub Container Registry
        docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-gpu \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-gpu
        docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-gpu
        
        # Docker Hub (if configured)
        if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
          docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/mlops-california-housing:latest-gpu \
            ${{ secrets.DOCKERHUB_USERNAME }}/mlops-california-housing:${{ github.ref_name }}-gpu
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/mlops-california-housing:latest-gpu
        fi

    - name: Create and push manifest for CPU variant
      run: |
        # GitHub Container Registry
        docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-cpu \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-cpu
        docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-cpu
        
        # Docker Hub (if configured)
        if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
          docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/mlops-california-housing:latest-cpu \
            ${{ secrets.DOCKERHUB_USERNAME }}/mlops-california-housing:${{ github.ref_name }}-cpu
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/mlops-california-housing:latest-cpu
        fi

  # ============================================================================
  # Image Vulnerability Assessment
  # ============================================================================
  vulnerability-scan:
    name: Vulnerability Assessment
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    strategy:
      matrix:
        variant: [gpu, cpu]
    
    steps:
    - name: Run comprehensive security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ matrix.variant }}
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Generate SBOM
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ matrix.variant }}
        format: 'spdx-json'
        output: 'sbom-${{ matrix.variant }}.spdx.json'

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom-${{ matrix.variant }}
        path: sbom-${{ matrix.variant }}.spdx.json

  # ============================================================================
  # Performance Benchmarking
  # ============================================================================
  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    strategy:
      matrix:
        variant: [cpu]  # Only test CPU variant in CI
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install benchmarking tools
      run: |
        pip install locust requests

    - name: Run container for benchmarking
      run: |
        docker run --rm -d --name benchmark-${{ matrix.variant }} -p 8000:8000 \
          -e GPU_ENABLED=false \
          -e DATABASE_URL=sqlite:///app/data/benchmark.db \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ matrix.variant }}
        
        # Wait for container to start
        sleep 30

    - name: Run performance benchmark
      run: |
        cat > locustfile.py << 'EOF'
        from locust import HttpUser, task, between
        import json
        
        class APIUser(HttpUser):
            wait_time = between(0.5, 2)
            
            @task(3)
            def health_check(self):
                self.client.get("/health")
                
            @task(2)
            def model_info(self):
                self.client.get("/model/info")
                
            @task(5)
            def predict_single(self):
                payload = {
                    "MedInc": 5.0,
                    "HouseAge": 10.0,
                    "AveRooms": 6.0,
                    "AveBedrms": 1.2,
                    "Population": 3000.0,
                    "AveOccup": 3.0,
                    "Latitude": 34.0,
                    "Longitude": -118.0
                }
                self.client.post("/predict", json=payload)
        EOF
        
        locust -f locustfile.py --headless -u 50 -r 5 -t 60s --host http://localhost:8000 \
          --html benchmark-report-${{ matrix.variant }}.html \
          --csv benchmark-${{ matrix.variant }}

    - name: Stop container
      if: always()
      run: docker stop benchmark-${{ matrix.variant }} || true

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: benchmark-results-${{ matrix.variant }}
        path: |
          benchmark-report-${{ matrix.variant }}.html
          benchmark-${{ matrix.variant }}_*.csv

  # ============================================================================
  # Cleanup
  # ============================================================================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [create-manifest, vulnerability-scan, performance-benchmark]
    if: always()
    
    steps:
    - name: Clean up old images
      if: github.event_name != 'pull_request'
      run: |
        echo "Cleanup would remove old images here"
        # This would typically involve calling registry APIs to remove old images
        # Implementation depends on the specific registry being used

    - name: Summary
      run: |
        echo "Docker build and push workflow completed"
        echo "Images built for variants: gpu, cpu"
        echo "Registry: ${{ env.REGISTRY }}"
        echo "Repository: ${{ env.IMAGE_NAME }}"