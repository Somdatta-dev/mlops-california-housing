name: Manual Workflow Dispatch

on:
  workflow_dispatch:
    inputs:
      workflow_type:
        description: 'Type of workflow to run'
        required: true
        default: 'ci'
        type: choice
        options:
        - ci
        - docker-build
        - deploy-staging
        - deploy-production
        - security-scan
        - performance-test
        - dependency-check
      environment:
        description: 'Target environment (for deployment)'
        required: false
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      image_tag:
        description: 'Docker image tag (for deployment)'
        required: false
        default: 'latest'
        type: string
      test_type:
        description: 'Type of test to run'
        required: false
        default: 'unit'
        type: choice
        options:
        - unit
        - integration
        - performance
        - security
        - all

jobs:
  # ============================================================================
  # Dispatch CI Workflow
  # ============================================================================
  dispatch-ci:
    name: Run CI Workflow
    if: github.event.inputs.workflow_type == 'ci'
    uses: ./.github/workflows/ci.yml

  # ============================================================================
  # Dispatch Docker Build
  # ============================================================================
  dispatch-docker-build:
    name: Run Docker Build
    if: github.event.inputs.workflow_type == 'docker-build'
    uses: ./.github/workflows/docker-build-push.yml
    secrets: inherit

  # ============================================================================
  # Dispatch Deployment
  # ============================================================================
  dispatch-deploy:
    name: Run Deployment
    if: github.event.inputs.workflow_type == 'deploy-staging' || github.event.inputs.workflow_type == 'deploy-production'
    uses: ./.github/workflows/deploy.yml
    secrets: inherit
    with:
      environment: ${{ github.event.inputs.environment }}
      image_tag: ${{ github.event.inputs.image_tag }}

  # ============================================================================
  # Manual Security Scan
  # ============================================================================
  manual-security-scan:
    name: Manual Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.workflow_type == 'security-scan'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety pip-audit semgrep
        pip install -r requirements.txt

    - name: Run comprehensive security scan
      run: |
        echo "🔍 Running comprehensive security scan..."
        
        # Bandit scan
        echo "Running Bandit..."
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ || true
        
        # Safety check
        echo "Running Safety..."
        safety check || true
        
        # Pip audit
        echo "Running pip-audit..."
        pip-audit || true
        
        # Semgrep scan
        echo "Running Semgrep..."
        semgrep --config=auto src/ || true

    - name: Docker security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: manual-security-scan-reports
        path: |
          bandit-report.json

  # ============================================================================
  # Manual Performance Test
  # ============================================================================
  manual-performance-test:
    name: Manual Performance Test
    runs-on: ubuntu-latest
    if: github.event.inputs.workflow_type == 'performance-test'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install -r requirements.txt
        pip install locust

    - name: Start API server
      run: |
        python -m uvicorn src.api.main:app --host 0.0.0.0 --port 8000 &
        API_PID=$!
        echo "API_PID=$API_PID" >> $GITHUB_ENV
        sleep 10
      env:
        PYTHONPATH: ${{ github.workspace }}
        GPU_ENABLED: false

    - name: Run performance tests
      run: |
        # Different test configurations based on test type
        case "${{ github.event.inputs.test_type }}" in
          "unit")
            locust -f tests/locustfile.py --headless -u 10 -r 2 -t 60s --host http://localhost:8000 --html performance-report.html
            ;;
          "integration")
            locust -f tests/locustfile.py --headless -u 25 -r 5 -t 120s --host http://localhost:8000 --html performance-report.html
            ;;
          "performance")
            locust -f tests/locustfile.py --headless -u 100 -r 10 -t 300s --host http://localhost:8000 --html performance-report.html
            ;;
          *)
            locust -f tests/locustfile.py --headless -u 50 -r 5 -t 180s --host http://localhost:8000 --html performance-report.html
            ;;
        esac

    - name: Stop API server
      if: always()
      run: |
        if [ -n "$API_PID" ]; then
          kill $API_PID || true
        fi

    - name: Upload performance report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: manual-performance-report
        path: performance-report.html

  # ============================================================================
  # Manual Dependency Check
  # ============================================================================
  manual-dependency-check:
    name: Manual Dependency Check
    if: github.event.inputs.workflow_type == 'dependency-check'
    uses: ./.github/workflows/dependency-update.yml

  # ============================================================================
  # Workflow Summary
  # ============================================================================
  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [dispatch-ci, dispatch-docker-build, dispatch-deploy, manual-security-scan, manual-performance-test, manual-dependency-check]
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "## 🚀 Manual Workflow Dispatch Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Workflow Type**: ${{ github.event.inputs.workflow_type }}" >> $GITHUB_STEP_SUMMARY
        echo "**Environment**: ${{ github.event.inputs.environment || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Image Tag**: ${{ github.event.inputs.image_tag || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Test Type**: ${{ github.event.inputs.test_type || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Results:" >> $GITHUB_STEP_SUMMARY
        echo "- CI: ${{ needs.dispatch-ci.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Docker Build: ${{ needs.dispatch-docker-build.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Deploy: ${{ needs.dispatch-deploy.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security Scan: ${{ needs.manual-security-scan.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Performance Test: ${{ needs.manual-performance-test.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Dependency Check: ${{ needs.manual-dependency-check.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY

    - name: Notify completion
      uses: 8398a7/action-slack@v3
      if: always() && secrets.SLACK_WEBHOOK_URL
      with:
        status: ${{ job.status }}
        channel: '#ci-cd'
        text: |
          🚀 Manual Workflow Completed
          
          Type: ${{ github.event.inputs.workflow_type }}
          Status: ${{ job.status }}
          Triggered by: ${{ github.actor }}
          
          Environment: ${{ github.event.inputs.environment || 'N/A' }}
          Image Tag: ${{ github.event.inputs.image_tag || 'N/A' }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}